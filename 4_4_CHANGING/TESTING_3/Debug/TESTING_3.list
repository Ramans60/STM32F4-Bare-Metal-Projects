
TESTING_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002bc  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000450  08000450  00002014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000450  08000450  00002014  2**0
                  CONTENTS
  4 .ARM          00000000  08000450  08000450  00002014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000450  08000450  00002014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000450  08000450  00001450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000454  08000454  00001454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08000458  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000014  0800046c  00002014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  0800046c  00002030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000119  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000c4  00000000  00000000  0000215d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  00002228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000033  00000000  00000000  00002278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000acb  00000000  00000000  000022ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000001da  00000000  00000000  00002d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00002e6c  00000000  00000000  00002f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00005dbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000084  00000000  00000000  00005e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00005e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000438 	.word	0x08000438

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08000438 	.word	0x08000438

080001d4 <delay>:
volatile unsigned int *RCC_AHB1ENR  = (volatile unsigned int*)0x40023830;

volatile unsigned int *GPIOA_MODER  = (volatile unsigned int*)0x40020000;
volatile unsigned int *GPIOA_ODR    = (volatile unsigned int*)0x40020014;

void delay() {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
    for (volatile int i = 0; i < 99999; i++) {
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e003      	b.n	80001e8 <delay+0x14>
        __asm("NOP");
 80001e0:	bf00      	nop
    for (volatile int i = 0; i < 99999; i++) {
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	3301      	adds	r3, #1
 80001e6:	607b      	str	r3, [r7, #4]
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	4a05      	ldr	r2, [pc, #20]	@ (8000200 <delay+0x2c>)
 80001ec:	4293      	cmp	r3, r2
 80001ee:	ddf7      	ble.n	80001e0 <delay+0xc>
    }
}
 80001f0:	bf00      	nop
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	0001869e 	.word	0x0001869e

08000204 <main>:

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
    *RCC_CR &= ~(1 << 16);
 800020a:	4b5f      	ldr	r3, [pc, #380]	@ (8000388 <main+0x184>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b5d      	ldr	r3, [pc, #372]	@ (8000388 <main+0x184>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000218:	601a      	str	r2, [r3, #0]
    *RCC_CR |=  (1 << 16);
 800021a:	4b5b      	ldr	r3, [pc, #364]	@ (8000388 <main+0x184>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	4b59      	ldr	r3, [pc, #356]	@ (8000388 <main+0x184>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000228:	601a      	str	r2, [r3, #0]
    while (!(*RCC_CR & (1 << 17)));
 800022a:	bf00      	nop
 800022c:	4b56      	ldr	r3, [pc, #344]	@ (8000388 <main+0x184>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000236:	2b00      	cmp	r3, #0
 8000238:	d0f8      	beq.n	800022c <main+0x28>

    *RCC_CFGR &= ~(0x3);
 800023a:	4b54      	ldr	r3, [pc, #336]	@ (800038c <main+0x188>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	4b52      	ldr	r3, [pc, #328]	@ (800038c <main+0x188>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f022 0203 	bic.w	r2, r2, #3
 8000248:	601a      	str	r2, [r3, #0]
    *RCC_CFGR |=  (1 << 0);
 800024a:	4b50      	ldr	r3, [pc, #320]	@ (800038c <main+0x188>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	681a      	ldr	r2, [r3, #0]
 8000250:	4b4e      	ldr	r3, [pc, #312]	@ (800038c <main+0x188>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f042 0201 	orr.w	r2, r2, #1
 8000258:	601a      	str	r2, [r3, #0]
    while (((*RCC_CFGR >> 2) & 0x3) != 1);
 800025a:	bf00      	nop
 800025c:	4b4b      	ldr	r3, [pc, #300]	@ (800038c <main+0x188>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	089b      	lsrs	r3, r3, #2
 8000264:	f003 0303 	and.w	r3, r3, #3
 8000268:	2b01      	cmp	r3, #1
 800026a:	d1f7      	bne.n	800025c <main+0x58>

    *RCC_AHB1ENR |= (1 << 0);
 800026c:	4b48      	ldr	r3, [pc, #288]	@ (8000390 <main+0x18c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	681a      	ldr	r2, [r3, #0]
 8000272:	4b47      	ldr	r3, [pc, #284]	@ (8000390 <main+0x18c>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f042 0201 	orr.w	r2, r2, #1
 800027a:	601a      	str	r2, [r3, #0]

    int i = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	607b      	str	r3, [r7, #4]
    while (i <= 14) {
 8000280:	e01b      	b.n	80002ba <main+0xb6>
        *GPIOA_MODER &= ~(3 << i);
 8000282:	4b44      	ldr	r3, [pc, #272]	@ (8000394 <main+0x190>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	681a      	ldr	r2, [r3, #0]
 8000288:	2103      	movs	r1, #3
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	fa01 f303 	lsl.w	r3, r1, r3
 8000290:	43db      	mvns	r3, r3
 8000292:	4619      	mov	r1, r3
 8000294:	4b3f      	ldr	r3, [pc, #252]	@ (8000394 <main+0x190>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	400a      	ands	r2, r1
 800029a:	601a      	str	r2, [r3, #0]
        *GPIOA_MODER |=  (1 << i);
 800029c:	4b3d      	ldr	r3, [pc, #244]	@ (8000394 <main+0x190>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	2101      	movs	r1, #1
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	fa01 f303 	lsl.w	r3, r1, r3
 80002aa:	4619      	mov	r1, r3
 80002ac:	4b39      	ldr	r3, [pc, #228]	@ (8000394 <main+0x190>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	430a      	orrs	r2, r1
 80002b2:	601a      	str	r2, [r3, #0]
        i += 2;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	3302      	adds	r3, #2
 80002b8:	607b      	str	r3, [r7, #4]
    while (i <= 14) {
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2b0e      	cmp	r3, #14
 80002be:	dde0      	ble.n	8000282 <main+0x7e>
    }

    while (1) {
        i = 0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	607b      	str	r3, [r7, #4]
        while (i <= 3) {
 80002c4:	e00f      	b.n	80002e6 <main+0xe2>
            *GPIOA_ODR &= ~(1 << i);
 80002c6:	4b34      	ldr	r3, [pc, #208]	@ (8000398 <main+0x194>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	2101      	movs	r1, #1
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	fa01 f303 	lsl.w	r3, r1, r3
 80002d4:	43db      	mvns	r3, r3
 80002d6:	4619      	mov	r1, r3
 80002d8:	4b2f      	ldr	r3, [pc, #188]	@ (8000398 <main+0x194>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	400a      	ands	r2, r1
 80002de:	601a      	str	r2, [r3, #0]
            i++;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	3301      	adds	r3, #1
 80002e4:	607b      	str	r3, [r7, #4]
        while (i <= 3) {
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2b03      	cmp	r3, #3
 80002ea:	ddec      	ble.n	80002c6 <main+0xc2>
        }
        delay(0);
 80002ec:	2000      	movs	r0, #0
 80002ee:	f7ff ff71 	bl	80001d4 <delay>

        i = 0;
 80002f2:	2300      	movs	r3, #0
 80002f4:	607b      	str	r3, [r7, #4]
        while (i <= 3) {
 80002f6:	e00e      	b.n	8000316 <main+0x112>
            *GPIOA_ODR |= (1 << i);
 80002f8:	4b27      	ldr	r3, [pc, #156]	@ (8000398 <main+0x194>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	681a      	ldr	r2, [r3, #0]
 80002fe:	2101      	movs	r1, #1
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	fa01 f303 	lsl.w	r3, r1, r3
 8000306:	4619      	mov	r1, r3
 8000308:	4b23      	ldr	r3, [pc, #140]	@ (8000398 <main+0x194>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	430a      	orrs	r2, r1
 800030e:	601a      	str	r2, [r3, #0]
            i++;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3301      	adds	r3, #1
 8000314:	607b      	str	r3, [r7, #4]
        while (i <= 3) {
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2b03      	cmp	r3, #3
 800031a:	dded      	ble.n	80002f8 <main+0xf4>
        }
        delay(0);
 800031c:	2000      	movs	r0, #0
 800031e:	f7ff ff59 	bl	80001d4 <delay>

        i = 4;
 8000322:	2304      	movs	r3, #4
 8000324:	607b      	str	r3, [r7, #4]
        while (i <= 7) {
 8000326:	e00f      	b.n	8000348 <main+0x144>
            *GPIOA_ODR &= ~(1 << i);
 8000328:	4b1b      	ldr	r3, [pc, #108]	@ (8000398 <main+0x194>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	2101      	movs	r1, #1
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	fa01 f303 	lsl.w	r3, r1, r3
 8000336:	43db      	mvns	r3, r3
 8000338:	4619      	mov	r1, r3
 800033a:	4b17      	ldr	r3, [pc, #92]	@ (8000398 <main+0x194>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	400a      	ands	r2, r1
 8000340:	601a      	str	r2, [r3, #0]
            i++;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	3301      	adds	r3, #1
 8000346:	607b      	str	r3, [r7, #4]
        while (i <= 7) {
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2b07      	cmp	r3, #7
 800034c:	ddec      	ble.n	8000328 <main+0x124>
        }
        delay(0);
 800034e:	2000      	movs	r0, #0
 8000350:	f7ff ff40 	bl	80001d4 <delay>

        i = 4;
 8000354:	2304      	movs	r3, #4
 8000356:	607b      	str	r3, [r7, #4]
        while (i <= 7) {
 8000358:	e00e      	b.n	8000378 <main+0x174>
            *GPIOA_ODR |= (1 << i);
 800035a:	4b0f      	ldr	r3, [pc, #60]	@ (8000398 <main+0x194>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	2101      	movs	r1, #1
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	fa01 f303 	lsl.w	r3, r1, r3
 8000368:	4619      	mov	r1, r3
 800036a:	4b0b      	ldr	r3, [pc, #44]	@ (8000398 <main+0x194>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	430a      	orrs	r2, r1
 8000370:	601a      	str	r2, [r3, #0]
            i++;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	3301      	adds	r3, #1
 8000376:	607b      	str	r3, [r7, #4]
        while (i <= 7) {
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2b07      	cmp	r3, #7
 800037c:	dded      	ble.n	800035a <main+0x156>
        }
        delay(0);
 800037e:	2000      	movs	r0, #0
 8000380:	f7ff ff28 	bl	80001d4 <delay>
        i = 0;
 8000384:	e79c      	b.n	80002c0 <main+0xbc>
 8000386:	bf00      	nop
 8000388:	20000000 	.word	0x20000000
 800038c:	20000004 	.word	0x20000004
 8000390:	20000008 	.word	0x20000008
 8000394:	2000000c 	.word	0x2000000c
 8000398:	20000010 	.word	0x20000010

0800039c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800039c:	480d      	ldr	r0, [pc, #52]	@ (80003d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800039e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a4:	480c      	ldr	r0, [pc, #48]	@ (80003d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003a6:	490d      	ldr	r1, [pc, #52]	@ (80003dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a8:	4a0d      	ldr	r2, [pc, #52]	@ (80003e0 <LoopForever+0xe>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ac:	e002      	b.n	80003b4 <LoopCopyDataInit>

080003ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003b2:	3304      	adds	r3, #4

080003b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b8:	d3f9      	bcc.n	80003ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ba:	4a0a      	ldr	r2, [pc, #40]	@ (80003e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003bc:	4c0a      	ldr	r4, [pc, #40]	@ (80003e8 <LoopForever+0x16>)
  movs r3, #0
 80003be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c0:	e001      	b.n	80003c6 <LoopFillZerobss>

080003c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c4:	3204      	adds	r2, #4

080003c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c8:	d3fb      	bcc.n	80003c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ca:	f000 f811 	bl	80003f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ce:	f7ff ff19 	bl	8000204 <main>

080003d2 <LoopForever>:

LoopForever:
  b LoopForever
 80003d2:	e7fe      	b.n	80003d2 <LoopForever>
  ldr   r0, =_estack
 80003d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80003d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003dc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80003e0:	08000458 	.word	0x08000458
  ldr r2, =_sbss
 80003e4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80003e8:	20000030 	.word	0x20000030

080003ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ec:	e7fe      	b.n	80003ec <ADC_IRQHandler>
	...

080003f0 <__libc_init_array>:
 80003f0:	b570      	push	{r4, r5, r6, lr}
 80003f2:	4d0d      	ldr	r5, [pc, #52]	@ (8000428 <__libc_init_array+0x38>)
 80003f4:	4c0d      	ldr	r4, [pc, #52]	@ (800042c <__libc_init_array+0x3c>)
 80003f6:	1b64      	subs	r4, r4, r5
 80003f8:	10a4      	asrs	r4, r4, #2
 80003fa:	2600      	movs	r6, #0
 80003fc:	42a6      	cmp	r6, r4
 80003fe:	d109      	bne.n	8000414 <__libc_init_array+0x24>
 8000400:	4d0b      	ldr	r5, [pc, #44]	@ (8000430 <__libc_init_array+0x40>)
 8000402:	4c0c      	ldr	r4, [pc, #48]	@ (8000434 <__libc_init_array+0x44>)
 8000404:	f000 f818 	bl	8000438 <_init>
 8000408:	1b64      	subs	r4, r4, r5
 800040a:	10a4      	asrs	r4, r4, #2
 800040c:	2600      	movs	r6, #0
 800040e:	42a6      	cmp	r6, r4
 8000410:	d105      	bne.n	800041e <__libc_init_array+0x2e>
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f855 3b04 	ldr.w	r3, [r5], #4
 8000418:	4798      	blx	r3
 800041a:	3601      	adds	r6, #1
 800041c:	e7ee      	b.n	80003fc <__libc_init_array+0xc>
 800041e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000422:	4798      	blx	r3
 8000424:	3601      	adds	r6, #1
 8000426:	e7f2      	b.n	800040e <__libc_init_array+0x1e>
 8000428:	08000450 	.word	0x08000450
 800042c:	08000450 	.word	0x08000450
 8000430:	08000450 	.word	0x08000450
 8000434:	08000454 	.word	0x08000454

08000438 <_init>:
 8000438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043a:	bf00      	nop
 800043c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043e:	bc08      	pop	{r3}
 8000440:	469e      	mov	lr, r3
 8000442:	4770      	bx	lr

08000444 <_fini>:
 8000444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000446:	bf00      	nop
 8000448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044a:	bc08      	pop	{r3}
 800044c:	469e      	mov	lr, r3
 800044e:	4770      	bx	lr
