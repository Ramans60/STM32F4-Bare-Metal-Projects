
ZIG_ZAG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000023c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d0  080003d0  00002014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003d0  080003d0  00002014  2**0
                  CONTENTS
  4 .ARM          00000000  080003d0  080003d0  00002014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003d0  080003d0  00002014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d0  080003d0  000013d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003d4  080003d4  000013d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080003d8  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000014  080003ec  00002014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  080003ec  00002030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000119  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000c4  00000000  00000000  0000215d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  00002228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000033  00000000  00000000  00002278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000acb  00000000  00000000  000022ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000198  00000000  00000000  00002d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00002e6a  00000000  00000000  00002f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00005d78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000084  00000000  00000000  00005dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00005e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003b8 	.word	0x080003b8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	080003b8 	.word	0x080003b8

080001d4 <delay>:
volatile unsigned int *RCC_AHB1ENR  = (volatile unsigned int*)0x40023830;

volatile unsigned int *GPIOA_MODER  = (volatile unsigned int*)0x40020000;
volatile unsigned int *GPIOA_ODR    = (volatile unsigned int*)0x40020014;

void delay() {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
    for (volatile int i = 0; i < 99999; i++) {
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e003      	b.n	80001e8 <delay+0x14>
        __asm("NOP");
 80001e0:	bf00      	nop
    for (volatile int i = 0; i < 99999; i++) {
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	3301      	adds	r3, #1
 80001e6:	607b      	str	r3, [r7, #4]
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	4a05      	ldr	r2, [pc, #20]	@ (8000200 <delay+0x2c>)
 80001ec:	4293      	cmp	r3, r2
 80001ee:	ddf7      	ble.n	80001e0 <delay+0xc>
    }
}
 80001f0:	bf00      	nop
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	0001869e 	.word	0x0001869e

08000204 <main>:

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
    *RCC_CR &= ~(1 << 16);
 800020a:	4b3f      	ldr	r3, [pc, #252]	@ (8000308 <main+0x104>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b3d      	ldr	r3, [pc, #244]	@ (8000308 <main+0x104>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000218:	601a      	str	r2, [r3, #0]
    *RCC_CR |=  (1 << 16);
 800021a:	4b3b      	ldr	r3, [pc, #236]	@ (8000308 <main+0x104>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	4b39      	ldr	r3, [pc, #228]	@ (8000308 <main+0x104>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000228:	601a      	str	r2, [r3, #0]
    while (!(*RCC_CR & (1 << 17)));
 800022a:	bf00      	nop
 800022c:	4b36      	ldr	r3, [pc, #216]	@ (8000308 <main+0x104>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000236:	2b00      	cmp	r3, #0
 8000238:	d0f8      	beq.n	800022c <main+0x28>

    *RCC_CFGR &= ~(0x3);
 800023a:	4b34      	ldr	r3, [pc, #208]	@ (800030c <main+0x108>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	4b32      	ldr	r3, [pc, #200]	@ (800030c <main+0x108>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f022 0203 	bic.w	r2, r2, #3
 8000248:	601a      	str	r2, [r3, #0]
    *RCC_CFGR |=  (1 << 0);
 800024a:	4b30      	ldr	r3, [pc, #192]	@ (800030c <main+0x108>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	681a      	ldr	r2, [r3, #0]
 8000250:	4b2e      	ldr	r3, [pc, #184]	@ (800030c <main+0x108>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f042 0201 	orr.w	r2, r2, #1
 8000258:	601a      	str	r2, [r3, #0]
    while (((*RCC_CFGR >> 2) & 0x3) != 1);
 800025a:	bf00      	nop
 800025c:	4b2b      	ldr	r3, [pc, #172]	@ (800030c <main+0x108>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	089b      	lsrs	r3, r3, #2
 8000264:	f003 0303 	and.w	r3, r3, #3
 8000268:	2b01      	cmp	r3, #1
 800026a:	d1f7      	bne.n	800025c <main+0x58>

    *RCC_AHB1ENR |= (1 << 0);
 800026c:	4b28      	ldr	r3, [pc, #160]	@ (8000310 <main+0x10c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	681a      	ldr	r2, [r3, #0]
 8000272:	4b27      	ldr	r3, [pc, #156]	@ (8000310 <main+0x10c>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f042 0201 	orr.w	r2, r2, #1
 800027a:	601a      	str	r2, [r3, #0]

    int i = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	607b      	str	r3, [r7, #4]
    while (i <= 14) {
 8000280:	e01b      	b.n	80002ba <main+0xb6>
        *GPIOA_MODER &= ~(3 << i);
 8000282:	4b24      	ldr	r3, [pc, #144]	@ (8000314 <main+0x110>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	681a      	ldr	r2, [r3, #0]
 8000288:	2103      	movs	r1, #3
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	fa01 f303 	lsl.w	r3, r1, r3
 8000290:	43db      	mvns	r3, r3
 8000292:	4619      	mov	r1, r3
 8000294:	4b1f      	ldr	r3, [pc, #124]	@ (8000314 <main+0x110>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	400a      	ands	r2, r1
 800029a:	601a      	str	r2, [r3, #0]
        *GPIOA_MODER |=  (1 << i);
 800029c:	4b1d      	ldr	r3, [pc, #116]	@ (8000314 <main+0x110>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	2101      	movs	r1, #1
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	fa01 f303 	lsl.w	r3, r1, r3
 80002aa:	4619      	mov	r1, r3
 80002ac:	4b19      	ldr	r3, [pc, #100]	@ (8000314 <main+0x110>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	430a      	orrs	r2, r1
 80002b2:	601a      	str	r2, [r3, #0]
        i += 2;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	3302      	adds	r3, #2
 80002b8:	607b      	str	r3, [r7, #4]
    while (i <= 14) {
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2b0e      	cmp	r3, #14
 80002be:	dde0      	ble.n	8000282 <main+0x7e>
    }

    while (1) {

        i = 0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	607b      	str	r3, [r7, #4]
        while (i <= 7) {
 80002c4:	e00a      	b.n	80002dc <main+0xd8>
            *GPIOA_ODR = (1 << i);
 80002c6:	2201      	movs	r2, #1
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	409a      	lsls	r2, r3
 80002cc:	4b12      	ldr	r3, [pc, #72]	@ (8000318 <main+0x114>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	601a      	str	r2, [r3, #0]
            delay();
 80002d2:	f7ff ff7f 	bl	80001d4 <delay>
            i++;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	3301      	adds	r3, #1
 80002da:	607b      	str	r3, [r7, #4]
        while (i <= 7) {
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2b07      	cmp	r3, #7
 80002e0:	ddf1      	ble.n	80002c6 <main+0xc2>
        }


        i = 6;
 80002e2:	2306      	movs	r3, #6
 80002e4:	607b      	str	r3, [r7, #4]
        while (i >= 1) {
 80002e6:	e00a      	b.n	80002fe <main+0xfa>
            *GPIOA_ODR = (1 << i);
 80002e8:	2201      	movs	r2, #1
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	409a      	lsls	r2, r3
 80002ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000318 <main+0x114>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	601a      	str	r2, [r3, #0]
            delay();
 80002f4:	f7ff ff6e 	bl	80001d4 <delay>
            i--;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	3b01      	subs	r3, #1
 80002fc:	607b      	str	r3, [r7, #4]
        while (i >= 1) {
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2b00      	cmp	r3, #0
 8000302:	dcf1      	bgt.n	80002e8 <main+0xe4>
        i = 0;
 8000304:	e7dc      	b.n	80002c0 <main+0xbc>
 8000306:	bf00      	nop
 8000308:	20000000 	.word	0x20000000
 800030c:	20000004 	.word	0x20000004
 8000310:	20000008 	.word	0x20000008
 8000314:	2000000c 	.word	0x2000000c
 8000318:	20000010 	.word	0x20000010

0800031c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800031c:	480d      	ldr	r0, [pc, #52]	@ (8000354 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800031e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000320:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000324:	480c      	ldr	r0, [pc, #48]	@ (8000358 <LoopForever+0x6>)
  ldr r1, =_edata
 8000326:	490d      	ldr	r1, [pc, #52]	@ (800035c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000328:	4a0d      	ldr	r2, [pc, #52]	@ (8000360 <LoopForever+0xe>)
  movs r3, #0
 800032a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800032c:	e002      	b.n	8000334 <LoopCopyDataInit>

0800032e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000332:	3304      	adds	r3, #4

08000334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000338:	d3f9      	bcc.n	800032e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033a:	4a0a      	ldr	r2, [pc, #40]	@ (8000364 <LoopForever+0x12>)
  ldr r4, =_ebss
 800033c:	4c0a      	ldr	r4, [pc, #40]	@ (8000368 <LoopForever+0x16>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000340:	e001      	b.n	8000346 <LoopFillZerobss>

08000342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000344:	3204      	adds	r2, #4

08000346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000348:	d3fb      	bcc.n	8000342 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800034a:	f000 f811 	bl	8000370 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800034e:	f7ff ff59 	bl	8000204 <main>

08000352 <LoopForever>:

LoopForever:
  b LoopForever
 8000352:	e7fe      	b.n	8000352 <LoopForever>
  ldr   r0, =_estack
 8000354:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800035c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000360:	080003d8 	.word	0x080003d8
  ldr r2, =_sbss
 8000364:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000368:	20000030 	.word	0x20000030

0800036c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800036c:	e7fe      	b.n	800036c <ADC_IRQHandler>
	...

08000370 <__libc_init_array>:
 8000370:	b570      	push	{r4, r5, r6, lr}
 8000372:	4d0d      	ldr	r5, [pc, #52]	@ (80003a8 <__libc_init_array+0x38>)
 8000374:	4c0d      	ldr	r4, [pc, #52]	@ (80003ac <__libc_init_array+0x3c>)
 8000376:	1b64      	subs	r4, r4, r5
 8000378:	10a4      	asrs	r4, r4, #2
 800037a:	2600      	movs	r6, #0
 800037c:	42a6      	cmp	r6, r4
 800037e:	d109      	bne.n	8000394 <__libc_init_array+0x24>
 8000380:	4d0b      	ldr	r5, [pc, #44]	@ (80003b0 <__libc_init_array+0x40>)
 8000382:	4c0c      	ldr	r4, [pc, #48]	@ (80003b4 <__libc_init_array+0x44>)
 8000384:	f000 f818 	bl	80003b8 <_init>
 8000388:	1b64      	subs	r4, r4, r5
 800038a:	10a4      	asrs	r4, r4, #2
 800038c:	2600      	movs	r6, #0
 800038e:	42a6      	cmp	r6, r4
 8000390:	d105      	bne.n	800039e <__libc_init_array+0x2e>
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f855 3b04 	ldr.w	r3, [r5], #4
 8000398:	4798      	blx	r3
 800039a:	3601      	adds	r6, #1
 800039c:	e7ee      	b.n	800037c <__libc_init_array+0xc>
 800039e:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a2:	4798      	blx	r3
 80003a4:	3601      	adds	r6, #1
 80003a6:	e7f2      	b.n	800038e <__libc_init_array+0x1e>
 80003a8:	080003d0 	.word	0x080003d0
 80003ac:	080003d0 	.word	0x080003d0
 80003b0:	080003d0 	.word	0x080003d0
 80003b4:	080003d4 	.word	0x080003d4

080003b8 <_init>:
 80003b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ba:	bf00      	nop
 80003bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003be:	bc08      	pop	{r3}
 80003c0:	469e      	mov	lr, r3
 80003c2:	4770      	bx	lr

080003c4 <_fini>:
 80003c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c6:	bf00      	nop
 80003c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ca:	bc08      	pop	{r3}
 80003cc:	469e      	mov	lr, r3
 80003ce:	4770      	bx	lr
