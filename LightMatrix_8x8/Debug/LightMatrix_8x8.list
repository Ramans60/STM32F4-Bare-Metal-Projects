
LightMatrix_8x8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000478  08000478  0000201c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000478  08000478  0000201c  2**0
                  CONTENTS
  4 .ARM          00000000  08000478  08000478  0000201c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000478  08000478  0000201c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000478  08000478  00001478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800047c  0800047c  0000147c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08000480  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000001c  0800049c  0000201c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  0800049c  00002038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000201c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000136  00000000  00000000  0000204c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000b9  00000000  00000000  00002182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  00002240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000033  00000000  00000000  00002290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000acb  00000000  00000000  000022c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000001dc  00000000  00000000  00002d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00002e88  00000000  00000000  00002f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00005df2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000084  00000000  00000000  00005e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00005ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000460 	.word	0x08000460

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	08000460 	.word	0x08000460

080001d4 <delay>:

volatile unsigned int *GPIOB_MODER=(volatile unsigned int*)0x40020400;
volatile unsigned int *GPIOB_ODR=(volatile unsigned int*)0x40020414;

void delay()
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	int i = 0;
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
	while (i < 90000) {
 80001de:	e003      	b.n	80001e8 <delay+0x14>
	    __asm("NOP");
 80001e0:	bf00      	nop
	    i++;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	3301      	adds	r3, #1
 80001e6:	607b      	str	r3, [r7, #4]
	while (i < 90000) {
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	4a05      	ldr	r2, [pc, #20]	@ (8000200 <delay+0x2c>)
 80001ec:	4293      	cmp	r3, r2
 80001ee:	ddf7      	ble.n	80001e0 <delay+0xc>
	}

}
 80001f0:	bf00      	nop
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	00015f8f 	.word	0x00015f8f

08000204 <main>:

int main()
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
	*RCC_CR &=~(1<<16);
 800020a:	4b67      	ldr	r3, [pc, #412]	@ (80003a8 <main+0x1a4>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b65      	ldr	r3, [pc, #404]	@ (80003a8 <main+0x1a4>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000218:	601a      	str	r2, [r3, #0]
	*RCC_CR |=(1<<16);
 800021a:	4b63      	ldr	r3, [pc, #396]	@ (80003a8 <main+0x1a4>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	4b61      	ldr	r3, [pc, #388]	@ (80003a8 <main+0x1a4>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000228:	601a      	str	r2, [r3, #0]

	*RCC_CFGR &=~(1<<0);
 800022a:	4b60      	ldr	r3, [pc, #384]	@ (80003ac <main+0x1a8>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	4b5e      	ldr	r3, [pc, #376]	@ (80003ac <main+0x1a8>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	f022 0201 	bic.w	r2, r2, #1
 8000238:	601a      	str	r2, [r3, #0]
	*RCC_CFGR |=(1<<0);
 800023a:	4b5c      	ldr	r3, [pc, #368]	@ (80003ac <main+0x1a8>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	4b5a      	ldr	r3, [pc, #360]	@ (80003ac <main+0x1a8>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f042 0201 	orr.w	r2, r2, #1
 8000248:	601a      	str	r2, [r3, #0]

	*RCC_AHB1ENR |=(1<<0);
 800024a:	4b59      	ldr	r3, [pc, #356]	@ (80003b0 <main+0x1ac>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	681a      	ldr	r2, [r3, #0]
 8000250:	4b57      	ldr	r3, [pc, #348]	@ (80003b0 <main+0x1ac>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f042 0201 	orr.w	r2, r2, #1
 8000258:	601a      	str	r2, [r3, #0]
	*RCC_AHB1ENR |=(1<<1);
 800025a:	4b55      	ldr	r3, [pc, #340]	@ (80003b0 <main+0x1ac>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b53      	ldr	r3, [pc, #332]	@ (80003b0 <main+0x1ac>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f042 0202 	orr.w	r2, r2, #2
 8000268:	601a      	str	r2, [r3, #0]


    int j = 0;
 800026a:	2300      	movs	r3, #0
 800026c:	607b      	str	r3, [r7, #4]
    while (j <= 14) {
 800026e:	e01b      	b.n	80002a8 <main+0xa4>
        *GPIOA_MODER &= ~(1 << j);
 8000270:	4b50      	ldr	r3, [pc, #320]	@ (80003b4 <main+0x1b0>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	2101      	movs	r1, #1
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	fa01 f303 	lsl.w	r3, r1, r3
 800027e:	43db      	mvns	r3, r3
 8000280:	4619      	mov	r1, r3
 8000282:	4b4c      	ldr	r3, [pc, #304]	@ (80003b4 <main+0x1b0>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	400a      	ands	r2, r1
 8000288:	601a      	str	r2, [r3, #0]
        *GPIOA_MODER |=  (1 << j);
 800028a:	4b4a      	ldr	r3, [pc, #296]	@ (80003b4 <main+0x1b0>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	681a      	ldr	r2, [r3, #0]
 8000290:	2101      	movs	r1, #1
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	fa01 f303 	lsl.w	r3, r1, r3
 8000298:	4619      	mov	r1, r3
 800029a:	4b46      	ldr	r3, [pc, #280]	@ (80003b4 <main+0x1b0>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	430a      	orrs	r2, r1
 80002a0:	601a      	str	r2, [r3, #0]
        j += 2;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	3302      	adds	r3, #2
 80002a6:	607b      	str	r3, [r7, #4]
    while (j <= 14) {
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	2b0e      	cmp	r3, #14
 80002ac:	dde0      	ble.n	8000270 <main+0x6c>
    }


    int i = 0;
 80002ae:	2300      	movs	r3, #0
 80002b0:	603b      	str	r3, [r7, #0]
    while (i <= 24)
 80002b2:	e027      	b.n	8000304 <main+0x100>
    {
    	if ((i>=0&&i<=4)||(i>=10&&i<=18))
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	db02      	blt.n	80002c0 <main+0xbc>
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	2b04      	cmp	r3, #4
 80002be:	dd05      	ble.n	80002cc <main+0xc8>
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	2b09      	cmp	r3, #9
 80002c4:	dd1b      	ble.n	80002fe <main+0xfa>
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	2b12      	cmp	r3, #18
 80002ca:	dc18      	bgt.n	80002fe <main+0xfa>
    	{
            *GPIOB_MODER &= ~(1 << i);
 80002cc:	4b3a      	ldr	r3, [pc, #232]	@ (80003b8 <main+0x1b4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	2101      	movs	r1, #1
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	fa01 f303 	lsl.w	r3, r1, r3
 80002da:	43db      	mvns	r3, r3
 80002dc:	4619      	mov	r1, r3
 80002de:	4b36      	ldr	r3, [pc, #216]	@ (80003b8 <main+0x1b4>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	400a      	ands	r2, r1
 80002e4:	601a      	str	r2, [r3, #0]
            *GPIOB_MODER |=  (1 << i);
 80002e6:	4b34      	ldr	r3, [pc, #208]	@ (80003b8 <main+0x1b4>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	681a      	ldr	r2, [r3, #0]
 80002ec:	2101      	movs	r1, #1
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	fa01 f303 	lsl.w	r3, r1, r3
 80002f4:	4619      	mov	r1, r3
 80002f6:	4b30      	ldr	r3, [pc, #192]	@ (80003b8 <main+0x1b4>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	430a      	orrs	r2, r1
 80002fc:	601a      	str	r2, [r3, #0]
    	}
        i += 2;
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	3302      	adds	r3, #2
 8000302:	603b      	str	r3, [r7, #0]
    while (i <= 24)
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	2b18      	cmp	r3, #24
 8000308:	ddd4      	ble.n	80002b4 <main+0xb0>



    while(1)
    {
        for (i=0; i<8; i++)
 800030a:	2300      	movs	r3, #0
 800030c:	603b      	str	r3, [r7, #0]
 800030e:	e047      	b.n	80003a0 <main+0x19c>
        {
            for (j=0; j<10; j++)
 8000310:	2300      	movs	r3, #0
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	e03e      	b.n	8000394 <main+0x190>
            {
                if(j != 3 && j != 4)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2b03      	cmp	r3, #3
 800031a:	d038      	beq.n	800038e <main+0x18a>
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2b04      	cmp	r3, #4
 8000320:	d035      	beq.n	800038e <main+0x18a>
                {
                    *GPIOA_ODR |= (1<<i);
 8000322:	4b26      	ldr	r3, [pc, #152]	@ (80003bc <main+0x1b8>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	681a      	ldr	r2, [r3, #0]
 8000328:	2101      	movs	r1, #1
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	fa01 f303 	lsl.w	r3, r1, r3
 8000330:	4619      	mov	r1, r3
 8000332:	4b22      	ldr	r3, [pc, #136]	@ (80003bc <main+0x1b8>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	430a      	orrs	r2, r1
 8000338:	601a      	str	r2, [r3, #0]
                    *GPIOB_ODR |= (1<<j);
 800033a:	4b21      	ldr	r3, [pc, #132]	@ (80003c0 <main+0x1bc>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	2101      	movs	r1, #1
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	fa01 f303 	lsl.w	r3, r1, r3
 8000348:	4619      	mov	r1, r3
 800034a:	4b1d      	ldr	r3, [pc, #116]	@ (80003c0 <main+0x1bc>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	430a      	orrs	r2, r1
 8000350:	601a      	str	r2, [r3, #0]
                    delay();
 8000352:	f7ff ff3f 	bl	80001d4 <delay>
                    *GPIOA_ODR &= ~(1<<i);
 8000356:	4b19      	ldr	r3, [pc, #100]	@ (80003bc <main+0x1b8>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	681a      	ldr	r2, [r3, #0]
 800035c:	2101      	movs	r1, #1
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	fa01 f303 	lsl.w	r3, r1, r3
 8000364:	43db      	mvns	r3, r3
 8000366:	4619      	mov	r1, r3
 8000368:	4b14      	ldr	r3, [pc, #80]	@ (80003bc <main+0x1b8>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	400a      	ands	r2, r1
 800036e:	601a      	str	r2, [r3, #0]
                    *GPIOB_ODR &= ~(1<<j);
 8000370:	4b13      	ldr	r3, [pc, #76]	@ (80003c0 <main+0x1bc>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	2101      	movs	r1, #1
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	fa01 f303 	lsl.w	r3, r1, r3
 800037e:	43db      	mvns	r3, r3
 8000380:	4619      	mov	r1, r3
 8000382:	4b0f      	ldr	r3, [pc, #60]	@ (80003c0 <main+0x1bc>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	400a      	ands	r2, r1
 8000388:	601a      	str	r2, [r3, #0]
                    delay();
 800038a:	f7ff ff23 	bl	80001d4 <delay>
            for (j=0; j<10; j++)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	3301      	adds	r3, #1
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	2b09      	cmp	r3, #9
 8000398:	ddbd      	ble.n	8000316 <main+0x112>
        for (i=0; i<8; i++)
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	3301      	adds	r3, #1
 800039e:	603b      	str	r3, [r7, #0]
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	2b07      	cmp	r3, #7
 80003a4:	ddb4      	ble.n	8000310 <main+0x10c>
 80003a6:	e7b0      	b.n	800030a <main+0x106>
 80003a8:	20000000 	.word	0x20000000
 80003ac:	20000004 	.word	0x20000004
 80003b0:	20000008 	.word	0x20000008
 80003b4:	2000000c 	.word	0x2000000c
 80003b8:	20000014 	.word	0x20000014
 80003bc:	20000010 	.word	0x20000010
 80003c0:	20000018 	.word	0x20000018

080003c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003c4:	480d      	ldr	r0, [pc, #52]	@ (80003fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003cc:	480c      	ldr	r0, [pc, #48]	@ (8000400 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ce:	490d      	ldr	r1, [pc, #52]	@ (8000404 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000408 <LoopForever+0xe>)
  movs r3, #0
 80003d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d4:	e002      	b.n	80003dc <LoopCopyDataInit>

080003d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003da:	3304      	adds	r3, #4

080003dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e0:	d3f9      	bcc.n	80003d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003e2:	4a0a      	ldr	r2, [pc, #40]	@ (800040c <LoopForever+0x12>)
  ldr r4, =_ebss
 80003e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000410 <LoopForever+0x16>)
  movs r3, #0
 80003e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e8:	e001      	b.n	80003ee <LoopFillZerobss>

080003ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003ec:	3204      	adds	r2, #4

080003ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f0:	d3fb      	bcc.n	80003ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003f2:	f000 f811 	bl	8000418 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003f6:	f7ff ff05 	bl	8000204 <main>

080003fa <LoopForever>:

LoopForever:
  b LoopForever
 80003fa:	e7fe      	b.n	80003fa <LoopForever>
  ldr   r0, =_estack
 80003fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000404:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000408:	08000480 	.word	0x08000480
  ldr r2, =_sbss
 800040c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000410:	20000038 	.word	0x20000038

08000414 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000414:	e7fe      	b.n	8000414 <ADC_IRQHandler>
	...

08000418 <__libc_init_array>:
 8000418:	b570      	push	{r4, r5, r6, lr}
 800041a:	4d0d      	ldr	r5, [pc, #52]	@ (8000450 <__libc_init_array+0x38>)
 800041c:	4c0d      	ldr	r4, [pc, #52]	@ (8000454 <__libc_init_array+0x3c>)
 800041e:	1b64      	subs	r4, r4, r5
 8000420:	10a4      	asrs	r4, r4, #2
 8000422:	2600      	movs	r6, #0
 8000424:	42a6      	cmp	r6, r4
 8000426:	d109      	bne.n	800043c <__libc_init_array+0x24>
 8000428:	4d0b      	ldr	r5, [pc, #44]	@ (8000458 <__libc_init_array+0x40>)
 800042a:	4c0c      	ldr	r4, [pc, #48]	@ (800045c <__libc_init_array+0x44>)
 800042c:	f000 f818 	bl	8000460 <_init>
 8000430:	1b64      	subs	r4, r4, r5
 8000432:	10a4      	asrs	r4, r4, #2
 8000434:	2600      	movs	r6, #0
 8000436:	42a6      	cmp	r6, r4
 8000438:	d105      	bne.n	8000446 <__libc_init_array+0x2e>
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000440:	4798      	blx	r3
 8000442:	3601      	adds	r6, #1
 8000444:	e7ee      	b.n	8000424 <__libc_init_array+0xc>
 8000446:	f855 3b04 	ldr.w	r3, [r5], #4
 800044a:	4798      	blx	r3
 800044c:	3601      	adds	r6, #1
 800044e:	e7f2      	b.n	8000436 <__libc_init_array+0x1e>
 8000450:	08000478 	.word	0x08000478
 8000454:	08000478 	.word	0x08000478
 8000458:	08000478 	.word	0x08000478
 800045c:	0800047c 	.word	0x0800047c

08000460 <_init>:
 8000460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000462:	bf00      	nop
 8000464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000466:	bc08      	pop	{r3}
 8000468:	469e      	mov	lr, r3
 800046a:	4770      	bx	lr

0800046c <_fini>:
 800046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046e:	bf00      	nop
 8000470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000472:	bc08      	pop	{r3}
 8000474:	469e      	mov	lr, r3
 8000476:	4770      	bx	lr
